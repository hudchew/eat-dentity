import { prisma } from './prisma';
import { Status } from '@prisma/client';
import { generatePersonaInsight } from './gemini';

interface PersonaResult {
  title: string;
  description: string;
  emoji: string;
  stats: Record<string, number>;
}

/**
 * Calculate persona from challenge data
 * @param challengeId The challenge ID
 * @returns The created persona
 */
export async function calculatePersona(challengeId: string) {
  // 1. Get meals + tags
  const challenge = await prisma.challenge.findUnique({
    where: { id: challengeId },
    include: {
      meals: {
        include: {
          tags: {
            include: {
              tag: true,
            },
          },
        },
      },
    },
  });

  if (!challenge) {
    throw new Error('Challenge not found');
  }

  if (challenge.meals.length === 0) {
    throw new Error('No meals found in challenge');
  }

  // 2. Count tags
  const tagCounts: Record<string, number> = {};
  let totalTags = 0;

  challenge.meals.forEach((meal) => {
    meal.tags.forEach(({ tag }) => {
      tagCounts[tag.slug] = (tagCounts[tag.slug] || 0) + 1;
      totalTags++;
    });
  });

  // 3. Calculate percentages
  const stats: Record<string, number> = {};
  Object.entries(tagCounts).forEach(([slug, count]) => {
    stats[slug] = Math.round((count / totalTags) * 100);
  });

  // 4. Determine Persona (‡∏ï‡∏≤‡∏° Persona Rules ‡πÉ‡∏ô app_idea.md)
  const persona = determinePersona(stats);

  // 5. Generate AI Insight (async, but don't fail if it errors)
  let aiInsight: string | null = null;
  try {
    aiInsight = await generatePersonaInsight(persona.title, stats);
    console.log('‚úÖ AI Insight generated successfully');
  } catch (error) {
    console.error('‚ö†Ô∏è Failed to generate AI Insight, continuing without it:', error);
    // Continue without AI insight if it fails
  }

  // 6. Save to database
  const savedPersona = await prisma.persona.create({
    data: {
      challengeId,
      title: persona.title,
      description: persona.description,
      statsJson: stats,
      aiInsight: aiInsight,
    },
  });

  return savedPersona;
}

/**
 * Determine persona based on stats according to rules in app_idea.md
 * Rules are checked in order of priority: Tier 1 > Tier 2 > Tier 3 > Tier 4
 */
function determinePersona(stats: Record<string, number>): PersonaResult {
  // Helper to get stat value safely
  const get = (slug: string) => stats[slug] || 0;

  // Tier 1: Dominant Single Tag (> 50%)
  if (get('fried') > 50) {
    return {
      title: '‡∏ô‡∏±‡∏Å‡∏£‡∏ö‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î ‡∏ú‡∏π‡πâ‡πÅ‡∏ö‡∏Å‡πÇ‡∏•‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏Ç‡∏°‡∏±‡∏ô',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏£‡∏ö‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ñ‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏ö ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡∏•‡πâ‡∏ß‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì!',
      emoji: 'üçó‚öîÔ∏è',
      stats,
    };
  }

  if (get('vegetable') > 50) {
    return {
      title: '‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏±‡∏Å‡∏©‡πå‡πÇ‡∏•‡∏Å',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏£‡∏ö‡∏™‡∏≤‡∏¢‡∏Å‡∏£‡∏µ‡∏ô ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏Å‡∏©‡πå‡πÇ‡∏•‡∏Å ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡∏•‡πâ‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á!',
      emoji: 'üê∞ü•¨',
      stats,
    };
  }

  if (get('dessert') > 50) {
    return {
      title: '‡∏£‡∏≤‡∏ä‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥ ‡∏ó‡∏∏‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏•‡πâ‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏ô‡πÉ‡∏à!',
      emoji: 'üç∞üëë',
      stats,
    };
  }

  if (get('coffee') > 40) {
    return {
      title: '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô ‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡πÅ‡∏ü‡∏î‡∏≥',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á ‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô ‡∏ó‡∏∏‡∏Å‡πÅ‡∏Å‡πâ‡∏ß‡∏Ñ‡∏∑‡∏≠‡∏û‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì!',
      emoji: '‚òïüí™',
      stats,
    };
  }

  if (get('meat') > 50) {
    return {
      title: '‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏û‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞!',
      emoji: 'ü•©üèπ',
      stats,
    };
  }

  // Tier 3: Combination Personas (check before Tier 2 for specificity)
  const friedSpicy = get('fried') + get('spicy');
  if (friedSpicy > 60) {
    return {
      title: '‡∏ô‡∏±‡∏Å‡∏£‡∏ö‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î‡∏™‡∏≤‡∏¢‡πÄ‡∏ú‡πá‡∏î',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏£‡∏ö‡∏ú‡∏π‡πâ‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢!',
      emoji: 'üçóüå∂Ô∏è',
      stats,
    };
  }

  const carbsDessert = get('carbs') + get('dessert');
  if (carbsDessert > 60) {
    return {
      title: '‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏∏‡πà‡∏°‡∏ü‡∏π',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ö‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏õ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô!',
      emoji: 'üçûü•ê',
      stats,
    };
  }

  const meatGrilled = get('meat') + get('grilled');
  if (meatGrilled > 60) {
    return {
      title: '‡πÄ‡∏ä‡∏ü‡∏ö‡∏≤‡∏£‡πå‡∏ö‡∏µ‡∏Ñ‡∏¥‡∏ß ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ä‡∏ü‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≤‡∏á ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÅ‡∏´‡πà‡∏á‡πÑ‡∏ü!',
      emoji: 'üî•ü•©',
      stats,
    };
  }

  // Tier 4: Funny Edge Cases
  const waterVegetable = get('water') + get('vegetable');
  if (waterVegetable > 70) {
    return {
      title: '‡∏§‡∏≤‡∏©‡∏µ‡πÄ‡∏Ç‡∏≤‡∏•‡∏∂‡∏Å ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏§‡∏≤‡∏©‡∏µ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏à‡∏¥‡∏ï‡πÉ‡∏à!',
      emoji: 'üíßüåø',
      stats,
    };
  }

  const coffeeDessert = get('coffee') + get('dessert');
  if (coffeeDessert > 60) {
    return {
      title: '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡πÅ‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!',
      emoji: '‚òïüç™',
      stats,
    };
  }

  // Check if only one food type dominates (all other types < 10%)
  const dominantTypes = Object.entries(stats).filter(([slug, value]) => value > 40);
  if (dominantTypes.length === 1) {
    return {
      title: '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏´‡∏•‡∏á‡∏ó‡∏≤‡∏á',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‡∏•‡∏≠‡∏á‡∏Å‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏î‡∏π‡∏ô‡∏∞!',
      emoji: 'ü§î',
      stats,
    };
  }

  // Tier 2: Balanced Diet (‡πÑ‡∏°‡πà‡∏°‡∏µ Tag ‡πÑ‡∏´‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 30%)
  const maxPercentage = Math.max(...Object.values(stats));
  if (maxPercentage <= 30) {
    return {
      title: '‡∏û‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 5 ‡∏´‡∏°‡∏π‡πà ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ã‡∏ô',
      description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏°‡∏∑‡πâ‡∏≠ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏´‡πà‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£!',
      emoji: 'üßò‚Äç‚ôÇÔ∏è',
      stats,
    };
  }

  // Default: Balanced with slight preference
  return {
    title: '‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏ú‡∏π‡πâ‡∏ó‡∏£‡∏á‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤',
    description: '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ!',
    emoji: '‚öñÔ∏è',
    stats,
  };
}

/**
 * Get persona stats as a formatted object for display
 */
export function getPersonaStats(stats: Record<string, number>) {
  const get = (slug: string) => stats[slug] || 0;

  return {
    fried: get('fried'),
    vegetable: get('vegetable'),
    meat: get('meat'),
    carbs: get('carbs'),
    dessert: get('dessert'),
    coffee: get('coffee'),
    spicy: get('spicy'),
    sweet: get('sweet'),
    salty: get('salty'),
    sour: get('sour'),
  };
}

